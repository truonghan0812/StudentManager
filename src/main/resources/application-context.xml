<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- Database -->
	<bean id="ds"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/student" />
		<property name="username" value="root" />
		<property name="password" value="root" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="ds" />
		<property name="packagesToScan" value="com.truonghan.models" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">create</prop>
			</props>
		</property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!-- <annotation-driven /> means that you can define spring beans dependencies without actually having to specify 
	a bunch of elements in xml or implement an interface or extend a base class. For example @Repository to tell spring
	 that a class is a Dao without having to extend JpaDaoSupport or some other subclass of DaoSupport. Similarly @Controller
	  tells spring that the the class specified contains methods that will handle http requests without you having to implement 
	  the Controller interface or extend a subclass that implements controller.-->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	
	<!--Component scanning with <context:component-scan base-package="com.mycompany.maventestwebapp" /> 
	is telling spring that it should search the class path for all the classes under com.mycompany.maventestweapp
	 and look at each class to see if it has a @Controller, or @Repository, or @Service, or @Component and if it 
	 does then Spring will register the class with the bean factory as if you had typed <bean class="..." /> in the 
	 xml configuration files. -->
	 <context:component-scan base-package="com.truonghan"></context:component-scan>
	 
	 <!-- Auto wired -->
	<context:annotation-config></context:annotation-config>


</beans>
